// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace BuyFuture.EfModels
{
    public partial class BuyfutureContext : DbContext
    {
        public BuyfutureContext()
        {
        }

        public BuyfutureContext(DbContextOptions<BuyfutureContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Price> Price { get; set; }
        public virtual DbSet<Stock> Stock { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserStock> UserStock { get; set; }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Price>(entity =>
            {
                entity.ToTable("price");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int(11)");

                entity.Property(e => e.Buy)
                    .HasColumnName("buy")
                    .HasColumnType("decimal(10,2)");

                entity.Property(e => e.Close)
                    .HasColumnName("close")
                    .HasColumnType("decimal(10,2)");

                entity.Property(e => e.High)
                    .HasColumnName("high")
                    .HasColumnType("decimal(10,2)");

                entity.Property(e => e.Low)
                    .HasColumnName("low")
                    .HasColumnType("decimal(10,2)");

                entity.Property(e => e.Open)
                    .HasColumnName("open")
                    .HasColumnType("decimal(10,2)");

                entity.Property(e => e.Price1)
                    .HasColumnName("price")
                    .HasColumnType("decimal(10,2)");

                entity.Property(e => e.Sell)
                    .HasColumnName("sell")
                    .HasColumnType("decimal(10,2)");

                entity.Property(e => e.StockNo)
                    .HasColumnName("stock_no")
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Time)
                    .HasColumnName("time")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpDown)
                    .HasColumnName("up_down")
                    .HasColumnType("decimal(10,2)");

                entity.Property(e => e.Volume)
                    .HasColumnName("volume")
                    .HasColumnType("decimal(10,2)");
            });

            modelBuilder.Entity<Stock>(entity =>
            {
                entity.ToTable("stock");

                entity.HasIndex(e => e.Code)
                    .HasName("code");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int(11)");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("user");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasColumnType("varchar(255)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Pwd)
                    .HasColumnName("pwd")
                    .HasColumnType("varchar(255)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<UserStock>(entity =>
            {
                entity.ToTable("user_stock");

                entity.HasIndex(e => e.StockId)
                    .HasName("fk_stock_id");

                entity.HasIndex(e => e.UserId)
                    .HasName("fk_user_id");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int(11)");

                entity.Property(e => e.StockId)
                    .HasColumnName("stock_id")
                    .HasColumnType("int(11)");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasColumnType("int(11)");

                entity.HasOne(d => d.Stock)
                    .WithMany(p => p.UserStock)
                    .HasForeignKey(d => d.StockId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_stock_id");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserStock)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_user_id");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}